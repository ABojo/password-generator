{"version":3,"sources":["components/PasswordBox.js","components/Setting.js","components/SettingsBox.js","components/LengthSlider.js","components/GenerateButton.js","components/SuccessMessage.js","App.js","index.js"],"names":["PasswordBox","props","password","setPopUpMessage","className","id","value","onClick","class","Setting","name","setting","setter","type","checked","onChange","toLowerCase","SettingsBox","settings","setSettings","newSettings","uppercase","numbers","symbols","LengthSlider","length","setLength","min","max","GenerateButton","generate","SuccessMessage","message","App","lowerString","upperString","toUpperCase","useState","setPassword","popUpMessage","generatePassword","chars","buildCharsString","newPassword","i","charAt","Math","floor","random","useEffect","passInput","document","getElementById","copyButton","copyToClipBoard","select","execCommand","blur","addEventListener","removeEventListener","e","currentTarget","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.dfc80394.chunk.js","sourcesContent":["function PasswordBox(props) {\r\n  const { password, setPopUpMessage } = props;\r\n  return (\r\n    <div className=\"w-full mb-8 flex items-stretch\">\r\n      <input\r\n        id=\"passInput\"\r\n        value={password}\r\n        className=\"rounded p-5 bg-true-gray-700 w-full text-white text-xl mr-3 \"\r\n      ></input>\r\n      <button\r\n        id=\"copyButton\"\r\n        className=\"bg-blue-500 px-3 text-white rounded hover:bg-blue-600 transition duration-200\"\r\n        onClick={() =>\r\n          setPopUpMessage(\r\n            `The password '${password}' has been copied to your clipboard!`\r\n          )\r\n        }\r\n      >\r\n        <i class=\"fas fa-copy text-white text-3xl\"></i>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PasswordBox;\r\n","function Setting(props) {\r\n  const { name, setting, setter } = props;\r\n\r\n  return (\r\n    <div className=\"w-full bg-true-gray-700 p-5 rounded shadow flex items-center text-white text-xl mb-4 justify-between\">\r\n      <p>{name}</p>\r\n      <label class=\"switch\">\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={setting}\r\n          onChange={() => {\r\n            setter(name.toLowerCase());\r\n          }}\r\n        />\r\n        <span class=\"slider round bg-true-gray-300\"></span>\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Setting;\r\n","import Setting from './Setting';\r\n\r\nfunction SettingsBox(props) {\r\n  const { settings, setSettings } = props;\r\n\r\n  const setter = (name) => {\r\n    const newSettings = { ...settings };\r\n    newSettings[name] = !settings[name];\r\n    setSettings(newSettings);\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-full mb-8\">\r\n      <h1 className=\"text-true-gray-100 mb-2\">Settings</h1>\r\n      <Setting name=\"Uppercase\" setting={settings.uppercase} setter={setter} />\r\n      <Setting name=\"Numbers\" setting={settings.numbers} setter={setter} />\r\n      <Setting name=\"Symbols\" setting={settings.symbols} setter={setter} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SettingsBox;\r\n","import { Fragment } from 'react';\r\n\r\nfunction LengthSlider(props) {\r\n  const { length, setLength } = props;\r\n  return (\r\n    <Fragment>\r\n      <h1 className=\"text-true-gray-100 mb-2\">Length: {length}</h1>\r\n      <div className=\"w-full bg-true-gray-700 p-5 rounded shadow flex items-center text-white text-xl mb-8\">\r\n        <p className=\"text-white mr-3\">4</p>\r\n        <input\r\n          type=\"range\"\r\n          min=\"4\"\r\n          value={length}\r\n          max=\"32\"\r\n          onChange={setLength}\r\n          className=\"mr-3 w-full\"\r\n        />\r\n        <p>32</p>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default LengthSlider;\r\n","function GenerateButton(props) {\r\n  return (\r\n    <button\r\n      onClick={props.generate}\r\n      className=\"w-full p-5 bg-blue-500 text-white font-bold rounded text-2xl hover:bg-blue-600 transition duartion-200\"\r\n    >\r\n      Generate\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default GenerateButton;\r\n","function SuccessMessage(props) {\r\n  return (\r\n    <div className=\"p-5 bg-green-100 rounded popUp w-11/12 max-w-xl mx-auto mb-2\">\r\n      <p className=\"text-green-900\">{props.message}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SuccessMessage;\r\n","import PasswordBox from './components/PasswordBox';\nimport SettingsBox from './components/SettingsBox';\nimport LengthSlider from './components/LengthSlider';\nimport GenerateButton from './components/GenerateButton';\nimport SuccessMessage from './components/SuccessMessage';\nimport { useState, useEffect } from 'react';\n\nfunction App() {\n  const lowerString = 'abcdefghijklmnopqrstuvwxyz';\n  const upperString = lowerString.toUpperCase();\n  const numsString = '0123456789';\n  const symbolsString = '!@#$%^&*';\n\n  const [settings, setSettings] = useState({\n    length: 16,\n    uppercase: true,\n    numbers: true,\n    symbols: true,\n  });\n  const [password, setPassword] = useState('');\n  const [popUpMessage, setPopUpMessage] = useState('');\n\n  //Uses short circuting to build the string that random characters will be chosen from\n  const buildCharsString = () => {\n    const { uppercase, numbers, symbols } = settings;\n\n    return `${lowerString}${uppercase && upperString}${numbers && numsString}${\n      symbols && symbolsString\n    }`;\n  };\n\n  const generatePassword = () => {\n    const chars = buildCharsString();\n    let newPassword = '';\n\n    for (let i = 0; i < settings.length; i++) {\n      newPassword += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n\n    setPassword(newPassword);\n  };\n\n  const setLength = (e) => {\n    const newSettings = { ...settings };\n    newSettings.length = e.currentTarget.value;\n    setSettings(newSettings);\n  };\n\n  const bindCopyListener = () => {\n    const passInput = document.getElementById('passInput');\n    const copyButton = document.getElementById('copyButton');\n\n    const copyToClipBoard = () => {\n      passInput.select();\n      document.execCommand('copy');\n      passInput.blur();\n    };\n\n    copyButton.addEventListener('click', copyToClipBoard);\n\n    return () => {\n      copyButton.removeEventListener('click', copyToClipBoard);\n    };\n  };\n\n  useEffect(bindCopyListener, []);\n\n  useEffect(() => {\n    generatePassword();\n  }, []);\n\n  return (\n    <div className=\"bg-true-gray-800 min-h-screen py-12\">\n      {popUpMessage && <SuccessMessage message={popUpMessage} />}\n\n      <div className=\"mx-auto max-w-xl w-11/12 bg-true-gray-900 p-8 rounded shadow\">\n        <h1 className=\"mb-8 mb-2 text-white font-bold text-xl\">\n          Password Generator\n        </h1>\n        <PasswordBox password={password} setPopUpMessage={setPopUpMessage} />\n        <LengthSlider length={settings.length} setLength={setLength} />\n        <SettingsBox settings={settings} setSettings={setSettings} />\n        <GenerateButton generate={generatePassword} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './styles/styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}